@using System.Globalization
@using AspNetCoreLocalizer
@using AspNetCoreLocalizer.Providers
@model AboutViewModel

@{
    ViewData["Title"] = "About";

    var provider = new InMemoryLocalizationProvider();
    AspNetCoreLocalizer.Configuration.LocalizationProvider = provider;

    Localizer.Instance.ClearAll();


    Localizer.Instance["CompanyName", ""] = "Company Name (Invariant)";

    Localizer.Instance["CompanyName", "tr-TR"] = "Company Name (TR)";

    Localizer.Instance["CompanyName", "en-US"] = "Company Name (EN)";

    // CultureInfo.CurrentCulture = new CultureInfo("tr-TR");

    Model.CompanyName = Localizer.Instance["CompanyName", "en-US"];
}
<h1>
    Localization Test
</h1>
<hr />
<table width="100%">
    <tr>
        <td>Culture </td>
        <td>@(CultureInfo.CurrentCulture.Name) </td>
    </tr>
    <tr>
        <td>UI Culture</td>
        <td>@(CultureInfo.CurrentUICulture.Name) </td>
    </tr>
    <tr>
        <td>@Html.DisplayNameFor(model => model.CompanyName)</td>
        <td>@Model.CompanyName</td>
    </tr>
    <tr>
        <td>@Html.DisplayNameFor(model => model.Address)</td>
        <td>@Model.Address</td>
    </tr>
    <tr>
        <td>@Html.DisplayNameFor(model => model.Description)</td>
        <td>@Model.Description</td>
    </tr>
</table>

<h2> Localization Content </h2>
<hr/>
<table width="100%">
    <thead>
        <tr>
            <td>Key</td>
            <td>Value</td>
            <td>Culture</td>
        </tr>
        @foreach (var entry in provider.LocalizerEntries)
        {
            <tr>
                <td>@entry.Key</td>
                <td>@entry.Value</td>
                <td>@entry.Culture</td>
            </tr>
        }
    </thead>
</table>